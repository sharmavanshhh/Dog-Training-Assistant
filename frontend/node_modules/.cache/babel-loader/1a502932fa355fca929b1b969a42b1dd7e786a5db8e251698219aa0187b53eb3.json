{"ast":null,"code":"var _jsxFileName = \"E:\\\\dog-trainer-chatbot\\\\frontend\\\\src\\\\components\\\\MessageBubble.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  text,\n  sender\n}) => {\n  _s();\n  const isUser = sender === \"user\";\n  const [speech, setSpeech] = useState(null); // Track the speech instance\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track whether speech is playing\n\n  // Handle the speech functionality\n  const handleSpeech = () => {\n    const newSpeech = new SpeechSynthesisUtterance(text);\n    newSpeech.rate = 1; // Adjust the rate of speech (1 is normal speed)\n    newSpeech.pitch = 1; // Adjust the pitch (1 is normal pitch)\n    newSpeech.volume = 1; // Adjust volume (1 is max volume)\n\n    // Set the current speech instance to the state\n    setSpeech(newSpeech);\n    setIsSpeaking(true); // Mark as speaking\n\n    window.speechSynthesis.speak(newSpeech);\n\n    // Listen for when the speech ends to reset the state\n    newSpeech.onend = () => {\n      setIsSpeaking(false); // Reset the speaking state when done\n    };\n  };\n\n  // Handle stopping the speech\n  const handleStop = () => {\n    if (speech) {\n      window.speechSynthesis.cancel(); // Stop the current speech\n      setIsSpeaking(false); // Reset the speaking state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-bubble\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${sender === \"user\" ? \"user-message\" : \"bot-message\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-text\",\n        dangerouslySetInnerHTML: {\n          __html: text\n        } // Use dangerouslySetInnerHTML to render HTML content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speech-controls\",\n      children: !isSpeaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpeech,\n        className: \"speech-button\",\n        children: \"\\uD83D\\uDD6B \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStop,\n        className: \"stop-button\",\n        children: \"\\u23F9 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageBubble, \"59THVKqJOmR/2K3/WsljwrvhFD8=\");\n_c = MessageBubble;\nexport default MessageBubble;\nvar _c;\n$RefreshReg$(_c, \"MessageBubble\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MessageBubble","text","sender","_s","isUser","speech","setSpeech","isSpeaking","setIsSpeaking","handleSpeech","newSpeech","SpeechSynthesisUtterance","rate","pitch","volume","window","speechSynthesis","speak","onend","handleStop","cancel","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/dog-trainer-chatbot/frontend/src/components/MessageBubble.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst MessageBubble = ({ text, sender }) => {\r\n  const isUser = sender === \"user\";\r\n  const [speech, setSpeech] = useState(null); // Track the speech instance\r\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track whether speech is playing\r\n\r\n  // Handle the speech functionality\r\n  const handleSpeech = () => {\r\n    const newSpeech = new SpeechSynthesisUtterance(text);\r\n    newSpeech.rate = 1;  // Adjust the rate of speech (1 is normal speed)\r\n    newSpeech.pitch = 1; // Adjust the pitch (1 is normal pitch)\r\n    newSpeech.volume = 1; // Adjust volume (1 is max volume)\r\n\r\n    // Set the current speech instance to the state\r\n    setSpeech(newSpeech);\r\n    setIsSpeaking(true); // Mark as speaking\r\n\r\n    window.speechSynthesis.speak(newSpeech);\r\n\r\n    // Listen for when the speech ends to reset the state\r\n    newSpeech.onend = () => {\r\n      setIsSpeaking(false); // Reset the speaking state when done\r\n    };\r\n  };\r\n\r\n  // Handle stopping the speech\r\n  const handleStop = () => {\r\n    if (speech) {\r\n      window.speechSynthesis.cancel(); // Stop the current speech\r\n      setIsSpeaking(false); // Reset the speaking state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-bubble\">\r\n      <div className={`${sender === \"user\" ? \"user-message\" : \"bot-message\"}`}>\r\n        {/* Render the message content with HTML formatting (line breaks, etc.) */}\r\n        <div\r\n          className=\"message-text\"\r\n          dangerouslySetInnerHTML={{ __html: text }} // Use dangerouslySetInnerHTML to render HTML content\r\n        />\r\n        {/* Add speaker or stop button depending on speaking state */}\r\n      </div>\r\n      {sender === \"bot\" && (\r\n          <div className=\"speech-controls\">\r\n            {!isSpeaking ? (\r\n              <button onClick={handleSpeech} className=\"speech-button\">\r\n                üï´ {/* Play button */}\r\n              </button>\r\n            ) : (\r\n              <button onClick={handleStop} className=\"stop-button\">\r\n                ‚èπ {/* Stop button */}\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageBubble;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,MAAM,GAAGF,MAAM,KAAK,MAAM;EAChC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD;EACA,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACV,IAAI,CAAC;IACpDS,SAAS,CAACE,IAAI,GAAG,CAAC,CAAC,CAAE;IACrBF,SAAS,CAACG,KAAK,GAAG,CAAC,CAAC,CAAC;IACrBH,SAAS,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;;IAEtB;IACAR,SAAS,CAACI,SAAS,CAAC;IACpBF,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;;IAErBO,MAAM,CAACC,eAAe,CAACC,KAAK,CAACP,SAAS,CAAC;;IAEvC;IACAA,SAAS,CAACQ,KAAK,GAAG,MAAM;MACtBV,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC;EACH,CAAC;;EAED;EACA,MAAMW,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAId,MAAM,EAAE;MACVU,MAAM,CAACC,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC;MACjCZ,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;EAED,oBACET,OAAA;IAAKsB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BvB,OAAA;MAAKsB,SAAS,EAAE,GAAGnB,MAAM,KAAK,MAAM,GAAG,cAAc,GAAG,aAAa,EAAG;MAAAoB,QAAA,eAEtEvB,OAAA;QACEsB,SAAS,EAAC,cAAc;QACxBE,uBAAuB,EAAE;UAAEC,MAAM,EAAEvB;QAAK,CAAE,CAAC;MAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC,CAAC,EACL1B,MAAM,KAAK,KAAK,iBACbH,OAAA;MAAKsB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7B,CAACf,UAAU,gBACVR,OAAA;QAAQ8B,OAAO,EAAEpB,YAAa;QAACY,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MACpD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,gBAET7B,OAAA;QAAQ8B,OAAO,EAAEV,UAAW;QAACE,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MACjD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEV,CAAC;AAACzB,EAAA,CAzDIH,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AA2DnB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}