{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import { io } from \"socket.io-client\";\n// import axios from \"axios\";\n// import MessageBubble from \"./MessageBubble\";\n\n// const socket = io(\"http://localhost:5000\");\n\n// const ChatBox = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n//   const [sessionId, setSessionId] = useState(Date.now().toString());\n//   const [streamingResponse, setStreamingResponse] = useState(\"\");\n//   const chatContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     socket.on(\"bot_response\", (data) => {\n//       setStreamingResponse((prev) => prev + data.response);\n//     });\n\n//     return () => {\n//       socket.off(\"bot_response\");\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     if (streamingResponse) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages.slice(0, -1),\n//         { sender: \"bot\", text: streamingResponse }\n//       ]);\n//     }\n//   }, [streamingResponse]);\n\n//   const sendMessage = () => {\n//     if (!input.trim()) return;\n\n//     const newMessage = { sender: \"user\", text: input };\n//     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\n//     setStreamingResponse(\"\");\n\n//     socket.emit(\"user_message\", { session_id: sessionId, message: input });\n\n//     setInput(\"\");\n//   };\n\n//   const generateSummary = async () => {\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\n//       alert(\"Chat Summary:\\n\" + response.data.summary);\n//     } catch (error) {\n//       console.error(\"Error generating summary:\", error);\n//     }\n//   };\n\n//   const downloadChat = async () => {\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\n\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement(\"a\");\n//       link.href = url;\n//       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//     } catch (error) {\n//       console.error(\"Error downloading chat:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\" ref={chatContainerRef}>\n//         {messages.map((msg, index) => (\n//           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\n//         ))}\n//       </div>\n//       <div className=\"input-area\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n//           placeholder=\"Type your message...\"\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//       <div className=\"buttons\">\n//         <button onClick={generateSummary}>Generate Summary</button>\n//         <button onClick={downloadChat}>Download Chat</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatBox;","map":{"version":3,"names":[],"sources":["E:/dog-trainer-chatbot/frontend/src/components/ChatBox.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { io } from \"socket.io-client\";\r\n// import axios from \"axios\";\r\n// import MessageBubble from \"./MessageBubble\";\r\n\r\n// const socket = io(\"http://localhost:5000\");\r\n\r\n// const ChatBox = () => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [input, setInput] = useState(\"\");\r\n//   const [sessionId, setSessionId] = useState(Date.now().toString());\r\n//   const [streamingResponse, setStreamingResponse] = useState(\"\");\r\n//   const chatContainerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"bot_response\", (data) => {\r\n//       setStreamingResponse((prev) => prev + data.response);\r\n//     });\r\n\r\n//     return () => {\r\n//       socket.off(\"bot_response\");\r\n//     };\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (streamingResponse) {\r\n//       setMessages((prevMessages) => [\r\n//         ...prevMessages.slice(0, -1),\r\n//         { sender: \"bot\", text: streamingResponse }\r\n//       ]);\r\n//     }\r\n//   }, [streamingResponse]);\r\n\r\n//   const sendMessage = () => {\r\n//     if (!input.trim()) return;\r\n\r\n//     const newMessage = { sender: \"user\", text: input };\r\n//     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\r\n//     setStreamingResponse(\"\");\r\n\r\n//     socket.emit(\"user_message\", { session_id: sessionId, message: input });\r\n\r\n//     setInput(\"\");\r\n//   };\r\n\r\n//   const generateSummary = async () => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\r\n//       alert(\"Chat Summary:\\n\" + response.data.summary);\r\n//     } catch (error) {\r\n//       console.error(\"Error generating summary:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const downloadChat = async () => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\r\n\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement(\"a\");\r\n//       link.href = url;\r\n//       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//       document.body.removeChild(link);\r\n//     } catch (error) {\r\n//       console.error(\"Error downloading chat:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chat-container\">\r\n//       <div className=\"chat-box\" ref={chatContainerRef}>\r\n//         {messages.map((msg, index) => (\r\n//           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"input-area\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n//           placeholder=\"Type your message...\"\r\n//         />\r\n//         <button onClick={sendMessage}>Send</button>\r\n//       </div>\r\n//       <div className=\"buttons\">\r\n//         <button onClick={generateSummary}>Generate Summary</button>\r\n//         <button onClick={downloadChat}>Download Chat</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatBox;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}