{"ast":null,"code":"// // import React, { useState, useEffect, useRef } from \"react\";\n// // import { io } from \"socket.io-client\";\n// // import axios from \"axios\";\n// // import MessageBubble from \"./MessageBubble\";\n\n// // const socket = io(\"http://localhost:5000\");\n\n// // const ChatBox = () => {\n// //   const [messages, setMessages] = useState([]);\n// //   const [input, setInput] = useState(\"\");\n// //   const [sessionId, setSessionId] = useState(Date.now().toString());\n// //   const [streamingResponse, setStreamingResponse] = useState(\"\");\n// //   const chatContainerRef = useRef(null);\n\n// //   useEffect(() => {\n// //     socket.on(\"bot_response\", (data) => {\n// //       setStreamingResponse((prev) => prev + data.response);\n// //     });\n\n// //     return () => {\n// //       socket.off(\"bot_response\");\n// //     };\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (streamingResponse) {\n// //       setMessages((prevMessages) => [\n// //         ...prevMessages.slice(0, -1),\n// //         { sender: \"bot\", text: streamingResponse }\n// //       ]);\n// //     }\n// //   }, [streamingResponse]);\n\n// //   const sendMessage = () => {\n// //     if (!input.trim()) return;\n\n// //     const newMessage = { sender: \"user\", text: input };\n// //     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\n// //     setStreamingResponse(\"\");\n\n// //     socket.emit(\"user_message\", { session_id: sessionId, message: input });\n\n// //     setInput(\"\");\n// //   };\n\n// //   const generateSummary = async () => {\n// //     try {\n// //       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\n// //       alert(\"Chat Summary:\\n\" + response.data.summary);\n// //     } catch (error) {\n// //       console.error(\"Error generating summary:\", error);\n// //     }\n// //   };\n\n// //   const downloadChat = async () => {\n// //     try {\n// //       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\n\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\n// //       const link = document.createElement(\"a\");\n// //       link.href = url;\n// //       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\n// //       document.body.appendChild(link);\n// //       link.click();\n// //       document.body.removeChild(link);\n// //     } catch (error) {\n// //       console.error(\"Error downloading chat:\", error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"chat-box\" ref={chatContainerRef}>\n// //         {messages.map((msg, index) => (\n// //           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\n// //         ))}\n// //       </div>\n// //       <div className=\"input-area\">\n// //         <input\n// //           type=\"text\"\n// //           value={input}\n// //           onChange={(e) => setInput(e.target.value)}\n// //           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n// //           placeholder=\"Type your message...\"\n// //         />\n// //         <button onClick={sendMessage}>Send</button>\n// //       </div>\n// //       <div className=\"buttons\">\n// //         <button onClick={generateSummary}>Generate Summary</button>\n// //         <button onClick={downloadChat}>Download Chat</button>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ChatBox;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { io } from \"socket.io-client\";\n// import MessageBubble from \"./MessageBubble\";\n\n// const socket = io(\"http://localhost:5000\"); // Update with your backend URL if deployed\n\n// const ChatBox = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     socket.on(\"message\", (msg) => {\n//       setMessages((prev) => [...prev, { text: msg, sender: \"bot\" }]);\n//     });\n\n//     return () => socket.off(\"message\");\n//   }, []);\n\n//   const sendMessage = () => {\n//     if (input.trim() !== \"\") {\n//       setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\n//       socket.emit(\"message\", input);\n//       setInput(\"\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   }, [messages]);\n\n//   return (\n//     <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\n//       {/* Header */}\n//       <div className=\"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\">\n//         üê∂ Dog Trainer Chatbot\n//       </div>\n\n//       {/* Messages */}\n//       <div className=\"flex-1 p-4 overflow-y-auto\">\n//         {messages.map((msg, index) => (\n//           <MessageBubble key={index} text={msg.text} sender={msg.sender} />\n//         ))}\n//         <div ref={messagesEndRef}></div>\n//       </div>\n\n//       {/* Input Field */}\n//       <div className=\"p-4 bg-gray-800 flex items-center\">\n//         <input\n//           type=\"text\"\n//           className=\"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button\n//           className=\"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\"\n//           onClick={sendMessage}\n//         >\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatBox;","map":{"version":3,"names":[],"sources":["E:/dog-trainer-chatbot/frontend/src/components/ChatBox.jsx"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from \"react\";\r\n// // import { io } from \"socket.io-client\";\r\n// // import axios from \"axios\";\r\n// // import MessageBubble from \"./MessageBubble\";\r\n\r\n// // const socket = io(\"http://localhost:5000\");\r\n\r\n// // const ChatBox = () => {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [input, setInput] = useState(\"\");\r\n// //   const [sessionId, setSessionId] = useState(Date.now().toString());\r\n// //   const [streamingResponse, setStreamingResponse] = useState(\"\");\r\n// //   const chatContainerRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     socket.on(\"bot_response\", (data) => {\r\n// //       setStreamingResponse((prev) => prev + data.response);\r\n// //     });\r\n\r\n// //     return () => {\r\n// //       socket.off(\"bot_response\");\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     if (streamingResponse) {\r\n// //       setMessages((prevMessages) => [\r\n// //         ...prevMessages.slice(0, -1),\r\n// //         { sender: \"bot\", text: streamingResponse }\r\n// //       ]);\r\n// //     }\r\n// //   }, [streamingResponse]);\r\n\r\n// //   const sendMessage = () => {\r\n// //     if (!input.trim()) return;\r\n\r\n// //     const newMessage = { sender: \"user\", text: input };\r\n// //     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\r\n// //     setStreamingResponse(\"\");\r\n\r\n// //     socket.emit(\"user_message\", { session_id: sessionId, message: input });\r\n\r\n// //     setInput(\"\");\r\n// //   };\r\n\r\n// //   const generateSummary = async () => {\r\n// //     try {\r\n// //       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\r\n// //       alert(\"Chat Summary:\\n\" + response.data.summary);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error generating summary:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const downloadChat = async () => {\r\n// //     try {\r\n// //       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\r\n\r\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n// //       const link = document.createElement(\"a\");\r\n// //       link.href = url;\r\n// //       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\r\n// //       document.body.appendChild(link);\r\n// //       link.click();\r\n// //       document.body.removeChild(link);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error downloading chat:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"chat-container\">\r\n// //       <div className=\"chat-box\" ref={chatContainerRef}>\r\n// //         {messages.map((msg, index) => (\r\n// //           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\r\n// //         ))}\r\n// //       </div>\r\n// //       <div className=\"input-area\">\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={input}\r\n// //           onChange={(e) => setInput(e.target.value)}\r\n// //           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n// //           placeholder=\"Type your message...\"\r\n// //         />\r\n// //         <button onClick={sendMessage}>Send</button>\r\n// //       </div>\r\n// //       <div className=\"buttons\">\r\n// //         <button onClick={generateSummary}>Generate Summary</button>\r\n// //         <button onClick={downloadChat}>Download Chat</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default ChatBox;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { io } from \"socket.io-client\";\r\n// import MessageBubble from \"./MessageBubble\";\r\n\r\n// const socket = io(\"http://localhost:5000\"); // Update with your backend URL if deployed\r\n\r\n// const ChatBox = () => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [input, setInput] = useState(\"\");\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"message\", (msg) => {\r\n//       setMessages((prev) => [...prev, { text: msg, sender: \"bot\" }]);\r\n//     });\r\n\r\n//     return () => socket.off(\"message\");\r\n//   }, []);\r\n\r\n//   const sendMessage = () => {\r\n//     if (input.trim() !== \"\") {\r\n//       setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\r\n//       socket.emit(\"message\", input);\r\n//       setInput(\"\");\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   }, [messages]);\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\r\n//       {/* Header */}\r\n//       <div className=\"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\">\r\n//         üê∂ Dog Trainer Chatbot\r\n//       </div>\r\n\r\n//       {/* Messages */}\r\n//       <div className=\"flex-1 p-4 overflow-y-auto\">\r\n//         {messages.map((msg, index) => (\r\n//           <MessageBubble key={index} text={msg.text} sender={msg.sender} />\r\n//         ))}\r\n//         <div ref={messagesEndRef}></div>\r\n//       </div>\r\n\r\n//       {/* Input Field */}\r\n//       <div className=\"p-4 bg-gray-800 flex items-center\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           placeholder=\"Type a message...\"\r\n//         />\r\n//         <button\r\n//           className=\"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\"\r\n//           onClick={sendMessage}\r\n//         >\r\n//           Send\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatBox;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}