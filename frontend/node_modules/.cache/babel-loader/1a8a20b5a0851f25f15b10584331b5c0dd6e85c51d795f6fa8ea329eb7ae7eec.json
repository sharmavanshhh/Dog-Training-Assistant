{"ast":null,"code":"var _jsxFileName = \"E:\\\\dog-trainer-chatbot\\\\frontend\\\\src\\\\components\\\\MessageBubble.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  text,\n  sender\n}) => {\n  _s();\n  const isUser = sender === \"user\";\n  const [speech, setSpeech] = useState(null); // Track the speech instance\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track whether speech is playing\n  const [voices, setVoices] = useState([]); // Store available voices\n  const [selectedVoice, setSelectedVoice] = useState(null); // Track selected voice\n\n  // Fetch available voices when the component mounts\n  useEffect(() => {\n    const fetchVoices = () => {\n      const availableVoices = window.speechSynthesis.getVoices();\n      setVoices(availableVoices);\n      // Set a default voice (can be updated later if needed)\n      const defaultVoice = availableVoices.find(voice => voice.name === \"Google UK English Female\");\n      setSelectedVoice(defaultVoice || availableVoices[0]);\n    };\n\n    // Initial voice fetch\n    fetchVoices();\n\n    // Handle voices loaded after the browser fetches them asynchronously\n    window.speechSynthesis.onvoiceschanged = fetchVoices;\n    return () => {\n      // Clean up on unmount\n      window.speechSynthesis.onvoiceschanged = null;\n    };\n  }, []);\n\n  // Handle the speech functionality\n  const handleSpeech = () => {\n    const newSpeech = new SpeechSynthesisUtterance(text);\n    newSpeech.rate = 1; // Adjust the rate of speech (1 is normal speed)\n    newSpeech.pitch = 1; // Adjust the pitch (1 is normal pitch)\n    newSpeech.volume = 1; // Adjust volume (1 is max volume)\n\n    if (selectedVoice) {\n      newSpeech.voice = selectedVoice; // Use the selected voice\n    }\n    setSpeech(newSpeech);\n    window.speechSynthesis.speak(newSpeech);\n  };\n\n  // Handle stopping the speech\n  const handleStop = () => {\n    if (speech) {\n      window.speechSynthesis.cancel(); // Stop the current speech\n      setIsSpeaking(false); // Reset the speaking state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-bubble\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${sender === \"user\" ? \"user-message\" : \"bot-message\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-text\",\n        dangerouslySetInnerHTML: {\n          __html: text\n        } // Use dangerouslySetInnerHTML to render HTML content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speech-controls\",\n      children: !isSpeaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpeech,\n        className: \"speech-button\",\n        children: \"\\uD83D\\uDD6B \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStop,\n        className: \"stop-button\",\n        children: \"\\u23F9 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageBubble, \"snkwpc+2KLjd3Dl++Yrt7BZ/Y1k=\");\n_c = MessageBubble;\nexport default MessageBubble;\nvar _c;\n$RefreshReg$(_c, \"MessageBubble\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MessageBubble","text","sender","_s","isUser","speech","setSpeech","isSpeaking","setIsSpeaking","voices","setVoices","selectedVoice","setSelectedVoice","fetchVoices","availableVoices","window","speechSynthesis","getVoices","defaultVoice","find","voice","name","onvoiceschanged","handleSpeech","newSpeech","SpeechSynthesisUtterance","rate","pitch","volume","speak","handleStop","cancel","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/dog-trainer-chatbot/frontend/src/components/MessageBubble.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst MessageBubble = ({ text, sender }) => {\r\n  const isUser = sender === \"user\";\r\n  const [speech, setSpeech] = useState(null); // Track the speech instance\r\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track whether speech is playing\r\n  const [voices, setVoices] = useState([]); // Store available voices\r\n  const [selectedVoice, setSelectedVoice] = useState(null); // Track selected voice\r\n\r\n// Fetch available voices when the component mounts\r\n  useEffect(() => {\r\n    const fetchVoices = () => {\r\n      const availableVoices = window.speechSynthesis.getVoices();\r\n      setVoices(availableVoices);\r\n      // Set a default voice (can be updated later if needed)\r\n      const defaultVoice = availableVoices.find(\r\n        (voice) => voice.name === \"Google UK English Female\"\r\n      );\r\n      setSelectedVoice(defaultVoice || availableVoices[0]);\r\n    };\r\n\r\n    // Initial voice fetch\r\n    fetchVoices();\r\n\r\n    // Handle voices loaded after the browser fetches them asynchronously\r\n    window.speechSynthesis.onvoiceschanged = fetchVoices;\r\n\r\n    return () => {\r\n      // Clean up on unmount\r\n      window.speechSynthesis.onvoiceschanged = null;\r\n    };\r\n  }, []);\r\n\r\n  // Handle the speech functionality\r\n  const handleSpeech = () => {\r\n    const newSpeech = new SpeechSynthesisUtterance(text);\r\n    newSpeech.rate = 1; // Adjust the rate of speech (1 is normal speed)\r\n    newSpeech.pitch = 1; // Adjust the pitch (1 is normal pitch)\r\n    newSpeech.volume = 1; // Adjust volume (1 is max volume)\r\n\r\n    if (selectedVoice) {\r\n      newSpeech.voice = selectedVoice; // Use the selected voice\r\n    }\r\n\r\n    setSpeech(newSpeech);\r\n    window.speechSynthesis.speak(newSpeech);\r\n  };\r\n\r\n    // Handle stopping the speech\r\n  const handleStop = () => {\r\n      if (speech) {\r\n      window.speechSynthesis.cancel(); // Stop the current speech\r\n      setIsSpeaking(false); // Reset the speaking state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-bubble\">\r\n      <div className={`${sender === \"user\" ? \"user-message\" : \"bot-message\"}`}>\r\n        {/* Render the message content with HTML formatting (line breaks, etc.) */}\r\n        <div\r\n          className=\"message-text\"\r\n          dangerouslySetInnerHTML={{ __html: text }} // Use dangerouslySetInnerHTML to render HTML content\r\n        />\r\n        {/* Add speaker or stop button depending on speaking state */}\r\n      </div>\r\n      {sender === \"bot\" && (\r\n          <div className=\"speech-controls\">\r\n            {!isSpeaking ? (\r\n              <button onClick={handleSpeech} className=\"speech-button\">\r\n                üï´ {/* Play button */}\r\n              </button>\r\n            ) : (\r\n              <button onClick={handleStop} className=\"stop-button\">\r\n                ‚èπ {/* Stop button */}\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageBubble;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}