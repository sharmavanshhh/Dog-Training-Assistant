{"ast":null,"code":"var _jsxFileName = \"E:\\\\dog-trainer-chatbot\\\\frontend\\\\src\\\\components\\\\ChatBox.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import { io } from \"socket.io-client\";\n// // import axios from \"axios\";\n// // import MessageBubble from \"./MessageBubble\";\n\n// // const socket = io(\"http://localhost:5000\");\n\n// // const ChatBox = () => {\n// //   const [messages, setMessages] = useState([]);\n// //   const [input, setInput] = useState(\"\");\n// //   const [sessionId, setSessionId] = useState(Date.now().toString());\n// //   const [streamingResponse, setStreamingResponse] = useState(\"\");\n// //   const chatContainerRef = useRef(null);\n\n// //   useEffect(() => {\n// //     socket.on(\"bot_response\", (data) => {\n// //       setStreamingResponse((prev) => prev + data.response);\n// //     });\n\n// //     return () => {\n// //       socket.off(\"bot_response\");\n// //     };\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (streamingResponse) {\n// //       setMessages((prevMessages) => [\n// //         ...prevMessages.slice(0, -1),\n// //         { sender: \"bot\", text: streamingResponse }\n// //       ]);\n// //     }\n// //   }, [streamingResponse]);\n\n// //   const sendMessage = () => {\n// //     if (!input.trim()) return;\n\n// //     const newMessage = { sender: \"user\", text: input };\n// //     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\n// //     setStreamingResponse(\"\");\n\n// //     socket.emit(\"user_message\", { session_id: sessionId, message: input });\n\n// //     setInput(\"\");\n// //   };\n\n// //   const generateSummary = async () => {\n// //     try {\n// //       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\n// //       alert(\"Chat Summary:\\n\" + response.data.summary);\n// //     } catch (error) {\n// //       console.error(\"Error generating summary:\", error);\n// //     }\n// //   };\n\n// //   const downloadChat = async () => {\n// //     try {\n// //       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\n\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\n// //       const link = document.createElement(\"a\");\n// //       link.href = url;\n// //       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\n// //       document.body.appendChild(link);\n// //       link.click();\n// //       document.body.removeChild(link);\n// //     } catch (error) {\n// //       console.error(\"Error downloading chat:\", error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"chat-box\" ref={chatContainerRef}>\n// //         {messages.map((msg, index) => (\n// //           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\n// //         ))}\n// //       </div>\n// //       <div className=\"input-area\">\n// //         <input\n// //           type=\"text\"\n// //           value={input}\n// //           onChange={(e) => setInput(e.target.value)}\n// //           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n// //           placeholder=\"Type your message...\"\n// //         />\n// //         <button onClick={sendMessage}>Send</button>\n// //       </div>\n// //       <div className=\"buttons\">\n// //         <button onClick={generateSummary}>Generate Summary</button>\n// //         <button onClick={downloadChat}>Download Chat</button>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ChatBox;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { io } from \"socket.io-client\";\n// import MessageBubble from \"./MessageBubble\";\n\n// const socket = io(\"http://localhost:5000\"); // Update with your backend URL if deployed\n\n// const ChatBox = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     socket.on(\"message\", (msg) => {\n//       setMessages((prev) => [...prev, { text: msg, sender: \"bot\" }]);\n//     });\n\n//     return () => socket.off(\"message\");\n//   }, []);\n\n//   const sendMessage = () => {\n//     if (input.trim() !== \"\") {\n//       setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\n//       socket.emit(\"message\", input);\n//       setInput(\"\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   }, [messages]);\n\n//   return (\n//     <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\n//       {/* Header */}\n//       <div className=\"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\">\n//         üê∂ Dog Trainer Chatbot\n//       </div>\n\n//       {/* Messages */}\n//       <div className=\"flex-1 p-4 overflow-y-auto\">\n//         {messages.map((msg, index) => (\n//           <MessageBubble key={index} text={msg.text} sender={msg.sender} />\n//         ))}\n//         <div ref={messagesEndRef}></div>\n//       </div>\n\n//       {/* Input Field */}\n//       <div className=\"p-4 bg-gray-800 flex items-center\">\n//         <input\n//           type=\"text\"\n//           className=\"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button\n//           className=\"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\"\n//           onClick={sendMessage}\n//         >\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatBox;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { io } from \"socket.io-client\";\nimport MessageBubble from \"./MessageBubble\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // Ensure this URL matches your backend\n\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    socket.on(\"message\", msg => {\n      console.log(\"Bot response received:\", msg); // Debugging line\n      setMessages(prev => [...prev, {\n        text: msg,\n        sender: \"bot\"\n      }]);\n    });\n    return () => socket.off(\"message\");\n  }, []);\n  const sendMessage = () => {\n    if (input.trim() !== \"\") {\n      setMessages(prev => [...prev, {\n        text: input,\n        sender: \"user\"\n      }]);\n      socket.emit(\"message\", input);\n      setInput(\"\");\n    }\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-gray-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\",\n      children: \"\\uD83D\\uDC36 Dog Trainer Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4 overflow-y-auto\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-800 flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"ABrHAQDP7g0qYpnOwslR1WwKacs=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","MessageBubble","jsxDEV","_jsxDEV","socket","ChatBox","_s","messages","setMessages","input","setInput","messagesEndRef","on","msg","console","log","prev","text","sender","off","sendMessage","trim","emit","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["E:/dog-trainer-chatbot/frontend/src/components/ChatBox.jsx"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from \"react\";\r\n// // import { io } from \"socket.io-client\";\r\n// // import axios from \"axios\";\r\n// // import MessageBubble from \"./MessageBubble\";\r\n\r\n// // const socket = io(\"http://localhost:5000\");\r\n\r\n// // const ChatBox = () => {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [input, setInput] = useState(\"\");\r\n// //   const [sessionId, setSessionId] = useState(Date.now().toString());\r\n// //   const [streamingResponse, setStreamingResponse] = useState(\"\");\r\n// //   const chatContainerRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     socket.on(\"bot_response\", (data) => {\r\n// //       setStreamingResponse((prev) => prev + data.response);\r\n// //     });\r\n\r\n// //     return () => {\r\n// //       socket.off(\"bot_response\");\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     if (streamingResponse) {\r\n// //       setMessages((prevMessages) => [\r\n// //         ...prevMessages.slice(0, -1),\r\n// //         { sender: \"bot\", text: streamingResponse }\r\n// //       ]);\r\n// //     }\r\n// //   }, [streamingResponse]);\r\n\r\n// //   const sendMessage = () => {\r\n// //     if (!input.trim()) return;\r\n\r\n// //     const newMessage = { sender: \"user\", text: input };\r\n// //     setMessages([...messages, newMessage, { sender: \"bot\", text: \"\" }]);\r\n// //     setStreamingResponse(\"\");\r\n\r\n// //     socket.emit(\"user_message\", { session_id: sessionId, message: input });\r\n\r\n// //     setInput(\"\");\r\n// //   };\r\n\r\n// //   const generateSummary = async () => {\r\n// //     try {\r\n// //       const response = await axios.post(\"http://localhost:5000/generate_summary\", { session_id: sessionId });\r\n// //       alert(\"Chat Summary:\\n\" + response.data.summary);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error generating summary:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const downloadChat = async () => {\r\n// //     try {\r\n// //       const response = await axios.post(\"http://localhost:5000/download_chat\", { session_id: sessionId }, { responseType: \"blob\" });\r\n\r\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n// //       const link = document.createElement(\"a\");\r\n// //       link.href = url;\r\n// //       link.setAttribute(\"download\", `chat_session_${sessionId}.pdf`);\r\n// //       document.body.appendChild(link);\r\n// //       link.click();\r\n// //       document.body.removeChild(link);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error downloading chat:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"chat-container\">\r\n// //       <div className=\"chat-box\" ref={chatContainerRef}>\r\n// //         {messages.map((msg, index) => (\r\n// //           <MessageBubble key={index} sender={msg.sender} text={msg.text} />\r\n// //         ))}\r\n// //       </div>\r\n// //       <div className=\"input-area\">\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={input}\r\n// //           onChange={(e) => setInput(e.target.value)}\r\n// //           onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n// //           placeholder=\"Type your message...\"\r\n// //         />\r\n// //         <button onClick={sendMessage}>Send</button>\r\n// //       </div>\r\n// //       <div className=\"buttons\">\r\n// //         <button onClick={generateSummary}>Generate Summary</button>\r\n// //         <button onClick={downloadChat}>Download Chat</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default ChatBox;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { io } from \"socket.io-client\";\r\n// import MessageBubble from \"./MessageBubble\";\r\n\r\n// const socket = io(\"http://localhost:5000\"); // Update with your backend URL if deployed\r\n\r\n// const ChatBox = () => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [input, setInput] = useState(\"\");\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"message\", (msg) => {\r\n//       setMessages((prev) => [...prev, { text: msg, sender: \"bot\" }]);\r\n//     });\r\n\r\n//     return () => socket.off(\"message\");\r\n//   }, []);\r\n\r\n//   const sendMessage = () => {\r\n//     if (input.trim() !== \"\") {\r\n//       setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\r\n//       socket.emit(\"message\", input);\r\n//       setInput(\"\");\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   }, [messages]);\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\r\n//       {/* Header */}\r\n//       <div className=\"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\">\r\n//         üê∂ Dog Trainer Chatbot\r\n//       </div>\r\n\r\n//       {/* Messages */}\r\n//       <div className=\"flex-1 p-4 overflow-y-auto\">\r\n//         {messages.map((msg, index) => (\r\n//           <MessageBubble key={index} text={msg.text} sender={msg.sender} />\r\n//         ))}\r\n//         <div ref={messagesEndRef}></div>\r\n//       </div>\r\n\r\n//       {/* Input Field */}\r\n//       <div className=\"p-4 bg-gray-800 flex items-center\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           placeholder=\"Type a message...\"\r\n//         />\r\n//         <button\r\n//           className=\"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\"\r\n//           onClick={sendMessage}\r\n//         >\r\n//           Send\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatBox;\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport MessageBubble from \"./MessageBubble\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Ensure this URL matches your backend\r\n\r\nconst ChatBox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (msg) => {\r\n      console.log(\"Bot response received:\", msg); // Debugging line\r\n      setMessages((prev) => [...prev, { text: msg, sender: \"bot\" }]);\r\n    });\r\n\r\n    return () => socket.off(\"message\");\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    if (input.trim() !== \"\") {\r\n      setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\r\n      socket.emit(\"message\", input);\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\r\n      <div className=\"p-4 bg-gray-800 shadow-md text-lg font-semibold text-center\">\r\n        üê∂ Dog Trainer Chatbot\r\n      </div>\r\n\r\n      <div className=\"flex-1 p-4 overflow-y-auto\">\r\n        {messages.map((msg, index) => (\r\n          <MessageBubble key={index} text={msg.text} sender={msg.sender} />\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n\r\n      <div className=\"p-4 bg-gray-800 flex items-center\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"flex-1 p-2 bg-gray-700 text-white rounded-lg outline-none\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          className=\"ml-2 bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600\"\r\n          onClick={sendMessage}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMK,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMc,cAAc,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACdM,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAGC,GA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}